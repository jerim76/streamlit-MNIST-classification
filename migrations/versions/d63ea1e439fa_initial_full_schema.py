"""Initial full schema

Revision ID: d63ea1e439fa
Revises:
Create Date: 2025-06-27 16:10:59.725635

"""
from alembic import op
import sqlalchemy as sa
import sqlalchemy_utils
# Import Enum classes from your models
from app.models import UserRole, BookingStatus, PaymentStatus


# revision identifiers, used by Alembic.
revision = 'd63ea1e439fa'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('service_categories',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('service_categories', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_service_categories_name'), ['name'], unique=True)

    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('phone_number', sa.String(length=20), nullable=False),
    sa.Column('password_hash', sa.String(length=256), nullable=True),
    sa.Column('email', sa.String(length=120), nullable=True),
    sa.Column('full_name', sa.String(length=100), nullable=False),
    sa.Column('role', sqlalchemy_utils.types.choice.ChoiceType(UserRole), nullable=False), # Changed
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_verified_freelancer', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_email'), ['email'], unique=True)
        batch_op.create_index(batch_op.f('ix_users_phone_number'), ['phone_number'], unique=True)

    op.create_table('services',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('freelancer_id', sa.Integer(), nullable=False),
    sa.Column('category_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=150), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('price_description', sa.String(length=100), nullable=False),
    sa.Column('estimated_price', sa.Float(), nullable=True),
    sa.Column('availability_schedule', sa.Text(), nullable=True),
    sa.Column('location_served', sa.String(length=200), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['service_categories.id'], ),
    sa.ForeignKeyConstraint(['freelancer_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('services', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_services_category_id'), ['category_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_services_freelancer_id'), ['freelancer_id'], unique=False)

    op.create_table('bookings',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('client_id', sa.Integer(), nullable=False),
    sa.Column('freelancer_id', sa.Integer(), nullable=False),
    sa.Column('service_id', sa.Integer(), nullable=True),
    sa.Column('service_details_custom', sa.Text(), nullable=True),
    sa.Column('booking_time', sa.DateTime(), nullable=False),
    sa.Column('status', sqlalchemy_utils.types.choice.ChoiceType(BookingStatus), nullable=False), # Changed
    sa.Column('client_notes', sa.Text(), nullable=True),
    sa.Column('freelancer_notes', sa.Text(), nullable=True),
    sa.Column('location_address', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['freelancer_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['service_id'], ['services.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('bookings', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_bookings_client_id'), ['client_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_bookings_freelancer_id'), ['freelancer_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_bookings_status'), ['status'], unique=False)

    op.create_table('notifications',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('is_read', sa.Boolean(), nullable=False),
    sa.Column('type', sa.String(length=50), nullable=True),
    sa.Column('related_booking_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['related_booking_id'], ['bookings.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('notifications', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_notifications_user_id'), ['user_id'], unique=False)

    op.create_table('payments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('booking_id', sa.Integer(), nullable=False),
    sa.Column('amount', sa.Float(), nullable=False),
    sa.Column('currency', sa.String(length=10), nullable=False),
    sa.Column('mpesa_transaction_id', sa.String(length=50), nullable=True),
    sa.Column('status', sqlalchemy_utils.types.choice.ChoiceType(PaymentStatus), nullable=False), # Changed
    sa.Column('payment_initiation_payload', sa.Text(), nullable=True),
    sa.Column('payment_confirmation_payload', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['booking_id'], ['bookings.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('payments', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_payments_booking_id'), ['booking_id'], unique=True)
        batch_op.create_index(batch_op.f('ix_payments_mpesa_transaction_id'), ['mpesa_transaction_id'], unique=True)
        batch_op.create_index(batch_op.f('ix_payments_status'), ['status'], unique=False)

    op.create_table('reviews',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('booking_id', sa.Integer(), nullable=False),
    sa.Column('reviewer_id', sa.Integer(), nullable=False),
    sa.Column('freelancer_id', sa.Integer(), nullable=False),
    sa.Column('rating', sa.Integer(), nullable=False),
    sa.Column('comment', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['booking_id'], ['bookings.id'], ),
    sa.ForeignKeyConstraint(['freelancer_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['reviewer_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('booking_id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('reviews')
    with op.batch_alter_table('payments', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_payments_status'))
        batch_op.drop_index(batch_op.f('ix_payments_mpesa_transaction_id'))
        batch_op.drop_index(batch_op.f('ix_payments_booking_id'))

    op.drop_table('payments')
    with op.batch_alter_table('notifications', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_notifications_user_id'))

    op.drop_table('notifications')
    with op.batch_alter_table('bookings', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_bookings_status'))
        batch_op.drop_index(batch_op.f('ix_bookings_freelancer_id'))
        batch_op.drop_index(batch_op.f('ix_bookings_client_id'))

    op.drop_table('bookings')
    with op.batch_alter_table('services', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_services_freelancer_id'))
        batch_op.drop_index(batch_op.f('ix_services_category_id'))

    op.drop_table('services')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_phone_number'))
        batch_op.drop_index(batch_op.f('ix_users_email'))

    op.drop_table('users')
    with op.batch_alter_table('service_categories', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_service_categories_name'))

    op.drop_table('service_categories')
    # ### end Alembic commands ###
